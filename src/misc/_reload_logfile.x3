#include <time.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>

#include "globals.h"
#include "re5_fstat.h"

/*
void reload_logfile(int log,char *log_filename,unsigned int log_max_file_size)
{
	unsigned int filesize;
	
	char new_fn[256];
	time_t res;
	struct tm *tt;
	
	filesize = re5_fstat(log_filename);
	
	if(filesize >= log_max_file_size) {
		res = time(NULL);
			
		tt = localtime(&res);
						
		sprintf(new_fn,"%s.%.4d%.2d%.2d%.2d%.2d%.2d",log_filename,
						                            (tt->tm_year+1900),(tt->tm_mon+1),(tt->tm_mday),
											        (tt->tm_hour),(tt->tm_min),(tt->tm_sec));
		re_reload_syslog(log,log_filename,new_fn);
	}
}*/

/* 
 * https://keithp.com/blogs/fd-passing/ 
 * https://github.com/keith-packard/fdpassing
 * */
/*int reload_logfile_socket(void)
{
	int sv[2];

    if (socketpair(AF_LOCAL, SOCK_STREAM, 0, sv) < 0) {
        //perror("socketpair");
        return -1;
    }
    
    return sv;
}*/

ssize_t reload_logfile_fd_write(int sock, void *buf, ssize_t buflen, int fd)
{
    ssize_t     size;
    struct msghdr   msg;
    struct iovec    iov;
    union {
        struct cmsghdr  cmsghdr;
        char        control[CMSG_SPACE(sizeof (int))];
    } cmsgu;
    struct cmsghdr  *cmsg;

    iov.iov_base = buf;
    iov.iov_len = buflen;

    msg.msg_name = NULL;
    msg.msg_namelen = 0;
    msg.msg_iov = &iov;
    msg.msg_iovlen = 1;
//    msg.msg_iov = NULL;
//    msg.msg_iovlen = 0;

    if (fd != -1) {
        msg.msg_control = cmsgu.control;
        msg.msg_controllen = sizeof(cmsgu.control);

        cmsg = CMSG_FIRSTHDR(&msg);
        cmsg->cmsg_len = CMSG_LEN(sizeof (int));
        cmsg->cmsg_level = SOL_SOCKET;
        cmsg->cmsg_type = SCM_RIGHTS;

        printf ("passing fd %d\n", fd);
        *((int *) CMSG_DATA(cmsg)) = fd;
    } else {
        msg.msg_control = NULL;
        msg.msg_controllen = 0;
        printf ("not passing fd\n");
    }

    size = sendmsg(sock, &msg, 0);

    if (size < 0)
        perror ("sendmsg");
    
    return size;
}

ssize_t reload_logfile_fd_read(int sock, void *buf, ssize_t bufsize, int *fd)
{
    ssize_t     size;

    if (fd) {
        struct msghdr   msg;
        struct iovec    iov;
        union {
            struct cmsghdr  cmsghdr;
            char        control[CMSG_SPACE(sizeof (int))];
        } cmsgu;
        struct cmsghdr  *cmsg;

        iov.iov_base = buf;
        iov.iov_len = bufsize;

        msg.msg_name = NULL;
        msg.msg_namelen = 0;

        msg.msg_iov = &iov;
        msg.msg_iovlen = 1;

        msg.msg_control = cmsgu.control;
        msg.msg_controllen = sizeof(cmsgu.control);
        size = recvmsg (sock, &msg, 0);
        if (size < 0) {
            perror ("recvmsg");
            exit(1);
        }
        cmsg = CMSG_FIRSTHDR(&msg);
        if (cmsg && cmsg->cmsg_len == CMSG_LEN(sizeof(int))) {
            if (cmsg->cmsg_level != SOL_SOCKET) {
                fprintf (stderr, "invalid cmsg_level %d\n",
                     cmsg->cmsg_level);
                exit(1);
            }
            if (cmsg->cmsg_type != SCM_RIGHTS) {
                fprintf (stderr, "invalid cmsg_type %d\n",
                     cmsg->cmsg_type);
                exit(1);
            }

            *fd = *((int *) CMSG_DATA(cmsg));
            printf ("received fd %d\n", *fd);
        } else
            *fd = -1;
    } else {
        size = read (sock, buf, bufsize);
        if (size < 0) {
            perror("read");
            exit(1);
        }
    }
    return size;
}

void child(int sock)
{
	int	fd;
	char buf[1] = {0};
	ssize_t	size;

	sleep(1);
	for (;;) {
		size = reload_logfile_fd_read(sock, buf, sizeof(buf), &fd);
		if (size <= 0)
			break;
		printf ("read %d\n", size);
		if (fd != -1) {
			write(fd, "hello, world",13);
			//write(fd,buf,sizeof(buf));
			close(fd);
		}
	}
}

void parent(int sock)
{
	ssize_t	size;
	int	i;
	int	fd;

	fd = open("test.log",O_CREAT|O_RDWR|O_APPEND,0600);
	size = reload_logfile_fd_write(sock, "1", 1, fd);
	printf ("wrote %d\n", size);
}

int main(int argc, char **argv)
{
	int	sv[2];
	int	pid;

	if (socketpair(AF_LOCAL, SOCK_STREAM, 0, sv) < 0) {
		perror("socketpair");
		exit(1);
	}
	switch ((pid = fork())) {
	case 0:
		//close(sv[0]);
		child(sv[1]);
		break;
	case -1:
		perror("fork");
		exit(1);
	default:
		//close(sv[1]);
		parent(sv[0]);
		break;
	}
		
	return 0;
}
