v1(RE4):
- две нишки: TCPServer,CacheEngine - постоянно активни,
  а когато има да се пресметне завършен разговор се стартира CallRating - още една нишка !
- постоянно отворени връзки към базите на сървърите(CDRServers),където се пазят CDR-ите.
- поддържа само една активна връзка(отваряне,получаване,обработка,отговор,затваряне) !
- TCPServer&CacheEngine използват предварително създаден динамичен масив от struct rating(rating.h),
  в който пишат,четат и обработват общи данни

v2(RE5):
- оптимизация на самия код
- трета постоянна нишка - CallControl
- отделен лог файл
- повече опции при конфигуриране
- синхронизация между нишките - TCPServer&CacheEngine ,
  като се използва pthread_mutex (lock&unlock) механизъм

v3(RE6):
???
- multiprotocols
- multiconnections
- multithreads or multiprocesses / multitasks /

v3-1(12.03.2016,предложение):

- една нишка на връзка /tcp connection/;
- нишката съществува докато е отворена връзката;
- нишката очаква съобщение,обработва го,когато го получи и връща отговор;

- последователно обработване от един процес/нишка/

- дърво на нишките:

+ cc_server
  |
  + int 0
  | |
  | + conn 0
  | |
  | + conn 1
  | |
  | + conn 2
  |
  + int 1
  | |
  | + conn 0
  | |
  | + conn 1
  |
  + int n
    |
    + conn 0
    |
    + conn n
    
??? cdr_server_id не трябва да е обвързан с интерфейса ???!!!
може няколко машини да работят с един ; например SMS1,2,3,4 пишат на .60 CDR-ите си !!!

cc_server_thread е нишка,която "обикаля" глобалният масив и чака TERM 

my_cc_thread е нишка към дадена връзка,която работи със същият глобален масив,
 като записва текущите разговори в него



bug: ако се получат едновременно две или повече съобщения по една и съща връзка ще се обработи само първото !!!
bug: когато има грешка при отварянето на връзка,не се прави повторен опит (my_cc)!!! 

./2cclient localhost 9090 42,1,maxsec,1234,35924119460,359884119998,1111
./2cclient localhost 9090 42,1,term,1234,nc,1111,30,40


v3-2,09.08.2017
- версия 2 на 'MyCC' протоколът,ASN.1 базиран
- една нишка за профил /слушане на определен порт/,последователно обслужване на отворените връзки към TCP клиенти



